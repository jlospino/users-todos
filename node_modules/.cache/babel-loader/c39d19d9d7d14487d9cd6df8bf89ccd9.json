{"ast":null,"code":"// array in local storage for registered users\nlet users = JSON.parse(localStorage.getItem('users')) || [];\n\nif (!users) {\n  const user = {\n    username: 'jlospino',\n    password: '12345'\n  };\n  localStorage.setItem('users', user);\n}\n\nexport function configureFakeBackend() {\n  let realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(() => {\n        // authenticate\n        if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n          // get parameters from post request\n          let params = JSON.parse(opts.body); // find if any user matches login credentials\n\n          let filteredUsers = users.filter(user => {\n            return user.username === params.username && user.password === params.password;\n          });\n\n          if (filteredUsers.length) {\n            // if login details are valid return user details and fake jwt token\n            let user = filteredUsers[0];\n            let responseJson = {\n              id: user.id,\n              username: user.username,\n              firstName: user.firstName,\n              lastName: user.lastName,\n              token: 'fake-jwt-token'\n            };\n            resolve({\n              ok: true,\n              text: () => Promise.resolve(JSON.stringify(responseJson))\n            });\n          } else {\n            // else return error\n            reject('Username or password is incorrect');\n          }\n\n          return;\n        } // pass through any requests not handled above\n\n\n        realFetch(url, opts).then(response => resolve(response));\n      }, 500);\n    });\n  };\n}","map":{"version":3,"names":["users","JSON","parse","localStorage","getItem","user","username","password","setItem","configureFakeBackend","realFetch","window","fetch","url","opts","Promise","resolve","reject","setTimeout","endsWith","method","params","body","filteredUsers","filter","length","responseJson","id","firstName","lastName","token","ok","text","stringify","then","response"],"sources":["C:/Users/SERDAN-DESARROLLO/Desktop/VueJS/src/helpers/fake-backend.js"],"sourcesContent":["// array in local storage for registered users\r\nlet users = JSON.parse(localStorage.getItem('users')) || [];\r\nif(!users){\r\n    const user = {\r\n        username: 'jlospino',\r\n        password: '12345'\r\n    }\r\n    localStorage.setItem('users',user)\r\n}\r\n\r\n\r\n\r\nexport function configureFakeBackend() {\r\n    let realFetch = window.fetch;\r\n    window.fetch = function (url, opts) {\r\n        return new Promise((resolve, reject) => {\r\n            // wrap in timeout to simulate server api call\r\n            setTimeout(() => {\r\n                \r\n\r\n                // authenticate\r\n                if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\r\n                    // get parameters from post request\r\n                    let params = JSON.parse(opts.body);\r\n\r\n                    // find if any user matches login credentials\r\n                    let filteredUsers = users.filter(user => {\r\n                        return user.username === params.username && user.password === params.password;\r\n                    });\r\n\r\n                    if (filteredUsers.length) {\r\n                        // if login details are valid return user details and fake jwt token\r\n                        let user = filteredUsers[0];\r\n                        let responseJson = {\r\n                            id: user.id,\r\n                            username: user.username,\r\n                            firstName: user.firstName,\r\n                            lastName: user.lastName,\r\n                            token: 'fake-jwt-token'\r\n                        };\r\n                        resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(responseJson)) });\r\n                    } else {\r\n                        // else return error\r\n                        reject('Username or password is incorrect');\r\n                    }\r\n\r\n                    return;\r\n                }\r\n                // pass through any requests not handled above\r\n                realFetch(url, opts).then(response => resolve(response));\r\n\r\n            }, 500);\r\n        });\r\n    }\r\n}"],"mappings":"AAAA;AACA,IAAIA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,KAA6C,EAAzD;;AACA,IAAG,CAACJ,KAAJ,EAAU;EACN,MAAMK,IAAI,GAAG;IACTC,QAAQ,EAAE,UADD;IAETC,QAAQ,EAAE;EAFD,CAAb;EAIAJ,YAAY,CAACK,OAAb,CAAqB,OAArB,EAA6BH,IAA7B;AACH;;AAID,OAAO,SAASI,oBAAT,GAAgC;EACnC,IAAIC,SAAS,GAAGC,MAAM,CAACC,KAAvB;;EACAD,MAAM,CAACC,KAAP,GAAe,UAAUC,GAAV,EAAeC,IAAf,EAAqB;IAChC,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACpC;MACAC,UAAU,CAAC,MAAM;QAGb;QACA,IAAIL,GAAG,CAACM,QAAJ,CAAa,qBAAb,KAAuCL,IAAI,CAACM,MAAL,KAAgB,MAA3D,EAAmE;UAC/D;UACA,IAAIC,MAAM,GAAGpB,IAAI,CAACC,KAAL,CAAWY,IAAI,CAACQ,IAAhB,CAAb,CAF+D,CAI/D;;UACA,IAAIC,aAAa,GAAGvB,KAAK,CAACwB,MAAN,CAAanB,IAAI,IAAI;YACrC,OAAOA,IAAI,CAACC,QAAL,KAAkBe,MAAM,CAACf,QAAzB,IAAqCD,IAAI,CAACE,QAAL,KAAkBc,MAAM,CAACd,QAArE;UACH,CAFmB,CAApB;;UAIA,IAAIgB,aAAa,CAACE,MAAlB,EAA0B;YACtB;YACA,IAAIpB,IAAI,GAAGkB,aAAa,CAAC,CAAD,CAAxB;YACA,IAAIG,YAAY,GAAG;cACfC,EAAE,EAAEtB,IAAI,CAACsB,EADM;cAEfrB,QAAQ,EAAED,IAAI,CAACC,QAFA;cAGfsB,SAAS,EAAEvB,IAAI,CAACuB,SAHD;cAIfC,QAAQ,EAAExB,IAAI,CAACwB,QAJA;cAKfC,KAAK,EAAE;YALQ,CAAnB;YAOAd,OAAO,CAAC;cAAEe,EAAE,EAAE,IAAN;cAAYC,IAAI,EAAE,MAAMjB,OAAO,CAACC,OAAR,CAAgBf,IAAI,CAACgC,SAAL,CAAeP,YAAf,CAAhB;YAAxB,CAAD,CAAP;UACH,CAXD,MAWO;YACH;YACAT,MAAM,CAAC,mCAAD,CAAN;UACH;;UAED;QACH,CA9BY,CA+Bb;;;QACAP,SAAS,CAACG,GAAD,EAAMC,IAAN,CAAT,CAAqBoB,IAArB,CAA0BC,QAAQ,IAAInB,OAAO,CAACmB,QAAD,CAA7C;MAEH,CAlCS,EAkCP,GAlCO,CAAV;IAmCH,CArCM,CAAP;EAsCH,CAvCD;AAwCH"},"metadata":{},"sourceType":"module"}