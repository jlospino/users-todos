{"ast":null,"code":"import config from '../helpers/config';\nimport { authHeader } from '../helpers/auth-header';\nexport const userService = {\n  login,\n  logout,\n  getById\n};\n\nfunction login(username, password) {\n  console.log(username, password);\n  /*const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ username, password })\r\n  };*/\n\n  /*return fetch(`${config.apiUrl}/users/authenticate`, requestOptions)\r\n      .then(handleResponse)\r\n      .then(user => {\r\n          // login successful if there's a jwt token in the response\r\n          if (user.token) {\r\n              // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n              localStorage.setItem('user', JSON.stringify(user));\r\n          }\r\n            return user;\r\n      });*/\n}\n/*function logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction getById(id) {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return data;\r\n    });\r\n}*/","map":{"version":3,"names":["config","authHeader","userService","login","logout","getById","username","password","console","log"],"sources":["C:/Users/SERDAN-DESARROLLO/Desktop/VueJS/src/services/userServices.js"],"sourcesContent":["import config from '../helpers/config';\r\nimport { authHeader } from '../helpers/auth-header';\r\n\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    getById,\r\n};\r\n\r\nfunction login(username, password) {\r\n    console.log(username, password)\r\n    /*const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password })\r\n    };*/\r\n\r\n    /*return fetch(`${config.apiUrl}/users/authenticate`, requestOptions)\r\n        .then(handleResponse)\r\n        .then(user => {\r\n            // login successful if there's a jwt token in the response\r\n            if (user.token) {\r\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n            }\r\n\r\n            return user;\r\n        });*/\r\n}\r\n\r\n/*function logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction getById(id) {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return data;\r\n    });\r\n}*/"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AAEA,OAAO,MAAMC,WAAW,GAAG;EACvBC,KADuB;EAEvBC,MAFuB;EAGvBC;AAHuB,CAApB;;AAMP,SAASF,KAAT,CAAeG,QAAf,EAAyBC,QAAzB,EAAmC;EAC/BC,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAAsBC,QAAtB;EACA;AACJ;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}